<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
		 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		 xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>2.4.5</version>
		<relativePath/> <!-- lookup parent from repository -->
	</parent>
	<groupId>dk.jonatanbuus</groupId>
	<artifactId>counterparty-fee-calculator</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<name>counterparty-fee-calculator</name>
	<description>
		The service calculates the counterparty fee and exposes the following APIs:
		* Liveness probe used for surveillance
		* Retrieve the Counterparty Fee
	</description>

	<properties>
		<java.version>11</java.version>
		<maven-compiler-plugin.version>3.8.1</maven-compiler-plugin.version>
		<lombok.version>1.18.20</lombok.version>
		<lombok-mapstruct-binding.version>0.2.0</lombok-mapstruct-binding.version>
		<mapstruct.version>1.4.2.Final</mapstruct.version>
		<openapi-generator-maven.version>5.1.0</openapi-generator-maven.version>
		<swagger-annotations.version>1.6.2</swagger-annotations.version>
		<jackson-databind.version>0.2.1</jackson-databind.version>
		<jackson-dataformat.version>2.12.3</jackson-dataformat.version>
		<springfox.version>3.0.0</springfox.version>
		<dockerfile-maven.version>1.4.13</dockerfile-maven.version>

		<start-class>dk.jonatanbuus.counterparty_fee_calculator.Application</start-class>
		<openapi-generated-sources-dir>${basedir}/target/generated-sources/openapi/src/gen/java/main/org/openapitools</openapi-generated-sources-dir>
	</properties>

	<repositories>
		<repository>
			<id>spring-milestones</id>
			<name>Spring Milestones</name>
			<url>https://repo.spring.io/milestone</url>
			<releases>
				<enabled>false</enabled>
			</releases>
		</repository>
		<repository>
			<id>spring-releases</id>
			<name>Spring Releases</name>
			<url>https://repo.spring.io/release</url>
			<snapshots>
				<enabled>false</enabled>
			</snapshots>
		</repository>
	</repositories>
	<pluginRepositories>
		<pluginRepository>
			<id>spring-milestones</id>
			<name>Spring Milestones</name>
			<url>https://repo.spring.io/milestone</url>
			<releases>
				<enabled>false</enabled>
			</releases>
		</pluginRepository>
		<pluginRepository>
			<id>spring-releases</id>
			<name>Spring Releases</name>
			<url>https://repo.spring.io/release</url>
			<snapshots>
				<enabled>false</enabled>
			</snapshots>
		</pluginRepository>
	</pluginRepositories>

	<dependencies>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-webflux</artifactId>
		</dependency>
		<dependency>
			<groupId>javax.validation</groupId>
			<artifactId>validation-api</artifactId>
		</dependency>
		<dependency>
			<groupId>org.projectlombok</groupId>
			<artifactId>lombok</artifactId>
			<version>${lombok.version}</version>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>org.projectlombok</groupId>
			<artifactId>lombok-mapstruct-binding</artifactId>
			<version>${lombok-mapstruct-binding.version}</version>
		</dependency>
		<dependency>
			<groupId>org.mapstruct</groupId>
			<artifactId>mapstruct</artifactId>
			<version>${mapstruct.version}</version>
		</dependency>
		<dependency>
			<groupId>org.mapstruct</groupId>
			<artifactId>mapstruct-processor</artifactId>
			<version>${mapstruct.version}</version>
		</dependency>
		<!--
		- Open API dependencies
		- See: https://github.com/OpenAPITools/openapi-generator
		-->
		<dependency>
			<groupId>io.swagger</groupId>
			<artifactId>swagger-annotations</artifactId>
			<version>${swagger-annotations.version}</version>
		</dependency>
		<dependency>
			<groupId>com.fasterxml.jackson.dataformat</groupId>
			<artifactId>jackson-dataformat-yaml</artifactId>
			<version>${jackson-dataformat.version}</version>
		</dependency>
		<dependency>
			<groupId>org.openapitools</groupId>
			<artifactId>jackson-databind-nullable</artifactId>
			<version>${jackson-databind.version}</version>
		</dependency>
		<!-- SpringFox dependencies -->
		<dependency>
			<groupId>io.springfox</groupId>
			<artifactId>springfox-boot-starter</artifactId>
			<version>${springfox.version}</version>
			<exclusions>
				<exclusion>
					<groupId>org.mapstruct</groupId>
					<artifactId>mapstruct</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
		<dependency>
			<groupId>io.springfox</groupId>
			<artifactId>springfox-swagger-ui</artifactId>
			<version>${springfox.version}</version>
		</dependency>
		<!-- Test dependencies -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>io.projectreactor</groupId>
			<artifactId>reactor-test</artifactId>
			<scope>test</scope>
		</dependency>
	</dependencies>

	<build>
		<plugins>
			<!--
			- See:
			- 	- https://openapi-generator.tech/docs/generators/java/
			- 	- https://github.com/OpenAPITools/openapi-generator/tree/master/modules/openapi-generator-maven-plugin
			-	- https://openapi-generator.tech/docs/generators/spring/
			-->
			<plugin>
				<groupId>org.openapitools</groupId>
				<artifactId>openapi-generator-maven-plugin</artifactId>
				<version>${openapi-generator-maven.version}</version>
				<executions>
					<execution>
						<id>generate-openapi-classes</id>
						<phase>generate-sources</phase>
						<goals>
							<goal>generate</goal>
						</goals>
						<configuration>
							<inputSpec>${project.basedir}/src/main/resources/openapi.yaml</inputSpec>
							<generatorName>spring</generatorName>
							<configOptions>
								<sourceFolder>src/gen/java/main</sourceFolder>
								<reactive>true</reactive>
								<generateAliasAsModel>true</generateAliasAsModel>
								<enablePostProcessFile>true</enablePostProcessFile>
								<strictSpec>true</strictSpec>
								<useTags>true</useTags>
								<title>Counterparty Fee Calculator</title>
							</configOptions>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>${maven-compiler-plugin.version}</version>
				<configuration>
					<source>${java.version}</source>
					<target>${java.version}</target>
					<annotationProcessorPaths>
						<path>
							<groupId>org.mapstruct</groupId>
							<artifactId>mapstruct-processor</artifactId>
							<version>${mapstruct.version}</version>
						</path>
						<path>
							<groupId>org.projectlombok</groupId>
							<artifactId>lombok</artifactId>
							<version>${lombok.version}</version>
						</path>
						<path>
							<groupId>org.projectlombok</groupId>
							<artifactId>lombok-mapstruct-binding</artifactId>
							<version>${lombok-mapstruct-binding.version}</version>
						</path>
					</annotationProcessorPaths>
				</configuration>
			</plugin>
		</plugins>
	</build>

	<profiles>
		<!-- 
		  - Builds a JAR file for a standard JVM
		  - Dependencies are declared in the profile: common and Maven must be run with -P jar,common
		  - Example: mvn package -P jar -e -ntp
		  -->
		  <profile>
			<id>jar</id>
			<build>
				<plugins>
					<plugin>
						<groupId>org.springframework.boot</groupId>
						<artifactId>spring-boot-maven-plugin</artifactId>
						<configuration>
							<layout>JAR</layout>
						</configuration>
						<executions>
							<execution>
								<goals>
									<goal>repackage</goal>
								</goals>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>
		<!-- 
		  - Generates Open API classes based on the Open API specification.
		  - Dependencies are declared in the profile: common and Maven must be run with -P openapi
		  - Example: mvn generate-sources -P openapi -e -ntp
		  -->
		  <profile>
			<id>openapi</id>
			<dependencies>
			</dependencies>
			<build>
				<plugins>
				</plugins>
			</build>
		</profile>
		<!-- 
          - Builds a Docker image
          - Example: mvn package -P docker -e -ntp
          -->
		<profile>
            <id>docker</id>
            <build>
                <plugins>
                    <!-- Set up JAR manifest -->
                    <plugin>
                        <artifactId>maven-jar-plugin</artifactId>
                        <configuration>
                            <archive>
                                <manifest>
                                    <addClasspath>true</addClasspath>
                                    <classpathPrefix>lib/</classpathPrefix>
                                    <mainClass>${start-class}</mainClass>
                                </manifest>
                            </archive>
                        </configuration>
                    </plugin>
                    <!-- Copy Maven dependencies into target/lib/ -->
                    <plugin>
                        <artifactId>maven-dependency-plugin</artifactId>
                        <executions>
                            <execution>
                                <phase>initialize</phase>
                                <goals>
                                    <goal>copy-dependencies</goal>
                                </goals>
                                <configuration>
                                    <overWriteReleases>false</overWriteReleases>
                                    <includeScope>runtime</includeScope>
                                    <outputDirectory>${project.build.directory}/lib</outputDirectory>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>

                    <plugin>
                        <groupId>com.spotify</groupId>
                        <artifactId>dockerfile-maven-plugin</artifactId>
                        <version>${dockerfile-maven.version}</version>
                        <executions>
                            <execution>
                                <id>build-image</id>
                                <goals>
                                    <goal>build</goal>
                                    <goal>push</goal>
                                </goals>
                            </execution>
                            <execution>
                                <id>tag-image-latest</id>
                                <goals>
                                    <goal>tag</goal>
                                </goals>
                                <configuration>
                                    <tag>latest</tag>
                                </configuration>
                            </execution>
                        </executions>
                        <configuration>
                            <repository>${project.groupId}/${project.artifactId}</repository>
                            <tag>${project.version}</tag>
                            <buildArgs>
                                <JAR_FILE>${project.build.finalName}.jar</JAR_FILE>
                            </buildArgs>
                        </configuration>
                        </plugin>
                </plugins>
            </build>
        </profile>
	</profiles>

</project>